name: WD MyCloud package CI

# Run via workflow_dispatch or after merging to main
on:
  push:
    branches:
      - main
    paths:
      - "wdpk/**"
  workflow_dispatch:
    inputs:
      packages:
        description: "Packages to build"
        required: false
        default: "docker"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-matrix.outputs.packages || steps.set-from-input.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        if: github.event_name == 'push'
        with:
          fetch-depth: 0

      - uses: yokawasa/action-setup-kube-tools@v0.9.3
        with:
          setup-tools: yq
          yq: "4.35.2"

      - id: set-matrix
        if: github.event_name == 'push'
        run: |
          # get all changed directories in wdpk/**/
          pkg=$(git diff --name-only HEAD~1 HEAD | grep -oP 'wdpk/\K[^/]+(?=/)' | sort -u | uniq)

          {
            echo "packages<<EOF"
            echo -e "packages:\n- \"$(echo $pkgs | sed 's/ /"\n- "/g')\"" | yq e ".packages" -o json | sed 's/\"\"//g'
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - id: set-from-input
        if: github.event_name == 'workflow_dispatch'
        run: |
          # turn workflow dispatch input into JSON array
          pkgs=$(echo ${{ github.event.inputs.packages }} | sed 's/ /","/g')

          {
            echo "packages<<EOF"
            echo -e "packages:\n- \"$(echo $pkgs | sed 's/ /"\n- "/g')\"" | yq e ".packages" -o json | sed 's/\"\"//g'
            echo "EOF"
          } >> $GITHUB_OUTPUT

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.packages != ''
    container:
      image: wdpk/wdpk
      options: -v ${{github.workspace}}/packages:/github/workspace/packages

    # define all the OS5 supporting platforms and a prettier name
    strategy:
      matrix:
        model:
          [EX4100, DL4100, EX2100, DL2100, MirrorG2, Ex2Ultra, PR4100, PR2100]
        package: ${{fromJson(needs.prepare.outputs.packages)}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Make APKG packages for selected platforms
        id: make_a_pkg
        env:
          MODEL: ${{ matrix.model }}
          PACKAGE: ${{ matrix.package }}
        shell: bash
        run: |
          declare -A PACKAGES
          PLATFORMS=( ["EX4100"]="WDMyCloudEX4100" ["EX2100"]="WDMyCloudEX2100" ["DL4100"]="WDMyCloudDL4100" ["DL2100"]="WDMyCloudDL2100" ["MirrorG2"]="WDMyCloudMirror" ["Ex2Ultra"]="MyCloudEX2Ultra" ["PR4100"]="MyCloudPR4100" ["PR2100"]="MyCloudPR2100")
          PLATFORM="${PLATFORMS[$MODEL]}" 

          pkg=$(echo ${PACKAGE:-docker} | cut -d' ' -f1)

          cd wdpk/${pkg}
          DATE="$(date +"%m%d%Y")"
          CWD="$(pwd)"
          VERSION="$(awk '/Version/{print $NF}' apkg.rc)"
          NAME="$(awk '/AddonShowName/{print $NF}' apkg.rc)"
          DESCRIPTION="$(awk '/Description/{print $NF}' apkg.rc)"

          echo "pkg=${pkg}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "name=${NAME}" >> $GITHUB_OUTPUT
          echo "description=${DESCRIPTION}" >> $GITHUB_OUTPUT


          echo "Building ${pkg} version ${VERSION}"
          echo "$(ls -l ../..)"
          RELEASE_DIR="../../packages/${pkg}/OS5"
          mkdir -p "${RELEASE_DIR}"

          echo "PLF ${PLATFORM} - ${PACKAGE}"
          echo "Build ${pkg} for $MODEL"
          ../../mksapkg-OS5 -E -s -m ${PLATFORM}
          mv ../${PLATFORM}*.bin\(* ../${pkg}_${VERSION}_${MODEL}.bin
          echo "$(ls -l ..)"
          mv ../${pkg}_${VERSION}_${MODEL}.bin "${RELEASE_DIR}"

      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}
          path: packages/${{ matrix.package }}/OS5/*.bin

      - uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.package }}
          outputs: |-
            version: ${{ steps.make_a_pkg.outputs.version }}

  ## Read matrix outputs
  read:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: build

    outputs:
      result: "${{ steps.read.outputs.result }}"

  release:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
      - read
    if: needs.prepare.outputs.packages != ''
    strategy:
      matrix:
        package: ${{fromJson(needs.prepare.outputs.packages)}}
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.package }}
          path: packages/${{ matrix.package }}/OS5

      - uses: yokawasa/action-setup-kube-tools@v0.9.3
        with:
          setup-tools: yq
          yq: "4.35.2"

      - name: Publish packages to GH Releases
        id: push
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION=$(echo '${{ needs.read.outputs.result }}' | yq eval ".version.${{ matrix.package }}")
          
          echo "VERSION ${VERSION}"
          echo "PACKAGE ${{ matrix.package }}"

          gh release create ${{ matrix.package }}-${version} \
            --generate-notes packages/${{ matrix.package }}/OS5/*.bin
